(function () {
	"use strict"
	function Element (tag) {
		this.tag = tag;
		this.nodeName = tag.toUpperCase();
		this.nodeType = 1;
		this.children = [];
		this.attrs = '';
		var nodes = [];
		this.appendChild = function (element) {
			if (element.nodeType === 11) {
				for (var i = 0, l = element.children.length; i < l; ++i)
					this.appendChild(element.children[i]);
			} else {
				this.children.push(element);
				nodes.push(element);
				element.parentNode = this;
			}
		}
		this.toXML = function (tabs, notabs) {
			if (!tabs)
				tabs = 0;
			var tstr = [],
			    length = nodes.length,
			    _notabs = true;
			if (!notabs)
				for (var i = 0; i < tabs; ++i)
					tstr.push('\t');
			var str = tstr.join('');
			str += ('<' + this.tag);
			if (this.attrs)
				str += this.attrs;
			str += length ? '>' : '/>';
			if (length > 1) {
				str += '\n';
				_notabs = false;
				++tabs;
			}
			for (var i = 0; i < length; ++i)
				str += nodes[i].toXML(tabs, _notabs);
			if (length)
				str += ('</' + this.tag + '>');
			return str;
		}
		this.getPrivates = function () {
			delete this.getPrivates;
			return {
				nodes: nodes
			};
		}
	}

	function Document (tag) {
		var element = new Element(tag),
		    privates = element.getPrivates(),
		    nodes = privates.nodes;
		for (var key in element)
			this[key] = element[key];
		this.nodeType = 9;
		this.createElement = function (tag) {return new Element(tag);}
		this.getElementById = function (id) {
			function _getById (elem) {
				if (elem.id === id)
					return elem;
				for (var i = 0, l = elem.children.length; i < l; ++i) {
					var r = _getById(elem.children[i]);
					if (r)
						return r;
				}
				return undefined;
			}
			return _getById(this);
		}

		//For test
		this.getNodes = function () {return nodes;};
	}

	exports.getDocument = function (tag) {return new Document(tag);};
}) ()