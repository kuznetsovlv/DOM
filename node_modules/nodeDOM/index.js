(function () {
	"use strict";

	var ExtArr = require('./lib/extarr.js').constructor;

	function Node (tag, type) {
		Object.defineProperties(this, {
			'tag': {value: tag, writable: false, enumerable: true, configurable: false},
			'nodeName': {value: tag.toUpperCase(), writable: false, enumerable: true, configurable: false},
			'nodeType': {value: {element: 1, text: 3, comments: 8, document: 9, documentfragment: 11}[(type + '').toLowerCase()] || type, writable: false, enumerable: true, configurable: false},
			'parentNode': {value: null, writable: true, enumerable: true, configurable: false},
			'childNodes': {value: new ExtArr(), writable: false, enumerable: true, configurable: false},
			'firstChild': {get: function () {return this.childNodes[0] || null;}, enumerable: true, configurable: false},
			'lastChild': {get: function () {return this.childNodes.last || null;}, enumerable: true, configurable: false},
			'nextSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.childNodes[this.parentNode.childNodes.position(this) + 1] || null;
			}, enumerable: true, configurable: false},
			'previousSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.childNodes[this.parentNode.childNodes.position(this) - 1] || null;
			}, enumerable: true, configurable: false}
		});
		if ([0, 1, 0, 3][this.nodeType])
			Object.defineProperty(this, 'nodeValue', {value: tag || tag === 0 || tag === false ? tag : '', writable: true, enumerable: true, configurable: false});
	}

	function element (tag, type) {
		var element = new Node(tag, type || 'element');

		Object.defineProperties(element, {
			'children': {value: new ExtArr(), writable: false, enumerable: true, configurable: false},
			'firstElementChild': {get: function () {return this.children[0] || null;}, enumerable: true, configurable: false},
			'lastElementChild': {get: function () {return this.children.last || null;}, enumerable: true, configurable: false},
			'nextElementSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.children[this.parentNode.children.position(this) + 1] || null;
			}, enumerable: true, configurable: false},
			'previousElementSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.children[this.parentNode.children.position(this) - 1] || null;
			}, enumerable: true, configurable: false},
			'childElementCount': {get: function () {return this.children.length}, enumerable: true, configurable: false}
		})

		return element;
	}

	/*function Element (tag, type) {
		var node = new Node(tag, type || 'element');

	/*	for (var key in node) {
			this[key] = node[key];
		}
		/*this.tag = tag;
		this.nodeName = tag.toUpperCase();
		this.nodeType = 1;
		this.children = [];
		this.attrs = '';
		var nodes = [];
		this.appendChild = function (element) {
			if (element.nodeType === 11) {
				for (var i = 0, l = element.children.length; i < l; ++i)
					this.appendChild(element.children[i]);
			} else {
				this.children.push(element);
				nodes.push(element);
				element.parentNode = this;
			}
		}
		this.toXML = function (tabs, notabs) {
			if (!tabs)
				tabs = 0;
			var tstr = [],
			    length = nodes.length,
			    _notabs = true;
			if (!notabs)
				for (var i = 0; i < tabs; ++i)
					tstr.push('\t');
			var str = tstr.join('');
			str += ('<' + this.tag);
			if (this.attrs)
				str += this.attrs;
			str += length ? '>' : '/>';
			if (length > 1) {
				str += '\n';
				_notabs = false;
				++tabs;
			}
			for (var i = 0; i < length; ++i)
				str += nodes[i].toXML(tabs, _notabs);
			if (length)
				str += ('</' + this.tag + '>');
			return str;
		}
		this.getPrivates = function () {
			delete this.getPrivates;
			return {
				nodes: nodes
			};
		}
	}

	/*function Document (tag) {
		var element = new Element(tag, 'document');/*,
		    privates = element.getPrivates(),
		    nodes = privates.nodes;
		for (var key in element)
			this[key] = element[key];
		this.createElement = function (tag) {return new Element(tag);}
		/*this.getElementById = function (id) {
			function _getById (elem) {
				if (elem.id === id)
					return elem;
				for (var i = 0, l = elem.children.length; i < l; ++i) {
					var r = _getById(elem.children[i]);
					if (r)
						return r;
				}
				return undefined;
			}
			return _getById(this);
		}

		//For test
		this.getNodes = function () {return nodes;};
	}*/

	exports.getDocument = function (tag) {
		var document = element (tag, 'document');

		return document;
	};
}) ()