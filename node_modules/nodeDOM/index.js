(function () {
	"use strict";

	var ExtArr = require('./lib/extarr.js').ExtArr;
	var FrozenArr = require('./lib/frozenarr.js').FrozenArr;

	function Node (tag, type) {
		Object.defineProperties(this, {
			'tag': {value: tag, writable: false, enumerable: true, configurable: false},
			'nodeName': {value: tag.toUpperCase(), writable: false, enumerable: true, configurable: false},
			'nodeType': {value: {element: 1, text: 3, comments: 8, document: 9, documentfragment: 11}[(type + '').toLowerCase()] || type, writable: false, enumerable: true, configurable: false},
			'parentNode': {value: null, writable: true, enumerable: true, configurable: false},
			'childNodes': {value: new ExtArr(), writable: false, enumerable: true, configurable: false},
			'firstChild': {get: function () {return this.childNodes[0] || null;}, enumerable: true, configurable: false},
			'lastChild': {get: function () {return this.childNodes.last || null;}, enumerable: true, configurable: false},
			'nextSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.childNodes[this.parentNode.childNodes.position(this) + 1] || null;
			}, enumerable: true, configurable: false},
			'previousSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.childNodes[this.parentNode.childNodes.position(this) - 1] || null;
			}, enumerable: true, configurable: false},
			'nodeValue': {value: [0, 1, 0, 3][this.nodeType] && ( tag || tag === 0 || tag === false) ? tag : '', writable: true, enumerable: true, configurable: false},
			'ownerDocument': {
				get: function () {
					if (this.nodeType === 9)
						return null;
					return this._ownerDocument || null;
				},
				set: function (v) {
					if (this._ownerDocument)
						return;
					Object.defineProperty(this, _ownerDocument, {value: v, writable: false, enumerable: false, configurable: false});
				}, enumerable: true, configurable: false
			},
			'textContent': {
				get: function () {
					switch (this.nodeType) {
						case 3:
						case 8: return this.nodeValue; /*this.data*/
						case 1:
						case 11: var str = [];
							for (var i = 0, l = this.childNodes.length; i < l; ++i)
								str.push(this.childNodes[i].textContent);
							return str.join(' ');
					}
				},
				set: function (v) {
					if (v.nodeType)
						v = v.textContent;
					else if (typeof v === 'object')
						v = v.toString();
					else
						v = '' + v;
					switch (this.nodeType) {
						case 1:
						case 11: while (this.childNodes.length) this.childNodes.shift(); this.childNodes.push(text(v));
					}
				}, enumerable: true, configurable: false
			},
			'removeChild': {
				value: function (elem) {
					if (!this.childNodes.remove(elem))
						throw "Can not remove element which is not child";
					elem.parentNode = null;
					return elem;
				},
				writable: false,
				enumerable: true,
				configurable: false
			},
			'appendChild': {
				value: function (elem) {
					if ((!{1: 1, 9: 9, 11: 11}[this.nodeType]) || elem.ownerDocument !== this.ownerDocument || elem.ownerDocument !== this)
						return undefined;
					if (elem.nodeType === 11)
						for (var i = 0, l = elem.childNodes.length; i < l; ++i)
							this.appendChild(elem.childNodes[i]);
					if (elem.parentNode)
						elem.parentNode.removeChild(elem);
					this.childNodes.push(elem);
					elem.parentNode = this;
					return elem;
				},
				writable: false,
				enumerable: true,
				configurable: false
			}
		});
	}

	function text (value) {
		var text = new Node (value, 'text');

		return text;
	}

	function element (tag, type) {
		var element = new Node(tag, type || 'element');

		Object.defineProperties(element, {
			'children': {get: function () {
				var elements = new FrozenArr(),
				    nodes = this.childNodes;
				for (var i = 0, l = nodes.length; i < l; ++i) {
					var node = nodes[i];
					if (node.nodeType === 1)
						elements.push(node);
				}
				return elements.clear();
			}, enumerable: true, configurable: false},
			'firstElementChild': {get: function () {return this.children[0] || null;}, enumerable: true, configurable: false},
			'lastElementChild': {get: function () {return this.children.last || null;}, enumerable: true, configurable: false},
			'nextElementSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.children[this.parentNode.children.position(this) + 1] || null;
			}, enumerable: true, configurable: false},
			'previousElementSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.children[this.parentNode.children.position(this) - 1] || null;
			}, enumerable: true, configurable: false},
			'childElementCount': {get: function () {return this.children.length}, enumerable: true, configurable: false}
		})

		return element;
	}

	/*function Element (tag, type) {
		var node = new Node(tag, type || 'element');

	/*	for (var key in node) {
			this[key] = node[key];
		}
		/*this.tag = tag;
		this.nodeName = tag.toUpperCase();
		this.nodeType = 1;
		this.children = [];
		this.attrs = '';
		var nodes = [];
		this.appendChild = function (element) {
			if (element.nodeType === 11) {
				for (var i = 0, l = element.children.length; i < l; ++i)
					this.appendChild(element.children[i]);
			} else {
				this.children.push(element);
				nodes.push(element);
				element.parentNode = this;
			}
		}
		this.toXML = function (tabs, notabs) {
			if (!tabs)
				tabs = 0;
			var tstr = [],
			    length = nodes.length,
			    _notabs = true;
			if (!notabs)
				for (var i = 0; i < tabs; ++i)
					tstr.push('\t');
			var str = tstr.join('');
			str += ('<' + this.tag);
			if (this.attrs)
				str += this.attrs;
			str += length ? '>' : '/>';
			if (length > 1) {
				str += '\n';
				_notabs = false;
				++tabs;
			}
			for (var i = 0; i < length; ++i)
				str += nodes[i].toXML(tabs, _notabs);
			if (length)
				str += ('</' + this.tag + '>');
			return str;
		}
		this.getPrivates = function () {
			delete this.getPrivates;
			return {
				nodes: nodes
			};
		}
	}

	/*function Document (tag) {
		var element = new Element(tag, 'document');/*,
		    privates = element.getPrivates(),
		    nodes = privates.nodes;
		for (var key in element)
			this[key] = element[key];
		this.createElement = function (tag) {return new Element(tag);}
		/*this.getElementById = function (id) {
			function _getById (elem) {
				if (elem.id === id)
					return elem;
				for (var i = 0, l = elem.children.length; i < l; ++i) {
					var r = _getById(elem.children[i]);
					if (r)
						return r;
				}
				return undefined;
			}
			return _getById(this);
		}

		//For test
		this.getNodes = function () {return nodes;};
	}*/

	exports.getDocument = function (tag) {
		var document = element (tag, 'document');

		Object.defineProperties(document, {
			/*'_nodes': {
				get: function () {
					var n = new ExtArr();
					function _scan (node) {
						n.push(node);
						var c = node.childNodes;
						for (var i = 0, l = c.length; i < l; ++i)
							_scan(c[i]);
						return n;
					}
					return _scan(this);
				},
				enumerable: false,
				configurable: false
			}*/
		});

		return document;
	};
}) ()