(function () {
	"use strict";

	var ExtArr = require('./lib/extarr.js').ExtArr;
	var FrozenArr = require('./lib/frozenarr.js').FrozenArr;

	var CONSTANTS = {};
	Object.defineProperties(CONSTANTS, {
		/*Node types*/
		'ELEMENT_NODE': {value: 1, writable: false, enumerable: false, configurable: false},
		'ATTRIBUTE_NODE': {value: 2, writable: false, enumerable: false, configurable: false},
		'TEXT_NODE': {value: 3, writable: false, enumerable: false, configurable: false},
		'PROCESSING_INSTRUCTION_NODE': {value: 7, writable: false, enumerable: false, configurable: false},
		'COMMENT_NODE': {value: 8, writable: false, enumerable: false, configurable: false},
		'DOCUMENT_NODE': {value: 9, writable: false, enumerable: false, configurable: false},
		'DOCUMENT_TYPE_NODE': {value: 10, writable: false, enumerable: false, configurable: false},
		'DOCUMENT_FRAGMENT_NODE': {value: 11, writable: false, enumerable: false, configurable: false},
		/*Compare position*/
		'DOCUMENT_POSITION_SAME': {value: 0x00, writable: false, enumerable: false, configurable: false},
		'DOCUMENT_POSITION_DISCONNECTED': {value: 0x01, writable: false, enumerable: false, configurable: false},
		'DOCUMENT_POSITION_PRECEDING': {value: 0x02, writable: false, enumerable: false, configurable: false},
		'DOCUMENT_POSITION_FOLLOWING': {value: 0x04, writable: false, enumerable: false, configurable: false},
		'DOCUMENT_POSITION_CONTAINS': {value: 0x08, writable: false, enumerable: false, configurable: false},
		'DOCUMENT_POSITION_CONTAINED_BY': {value: 0x10, writable: false, enumerable: false, configurable: false}
	});

	function isContainer (node) {
		    return [CONSTANTS.ELEMENT_NODE, CONSTANTS.DOCUMENT_NODE, CONSTANTS.DOCUMENT_FRAGMENT_NODE].indexOf(node.nodeType) >=0;
	}
	function isText (node) {
		return [CONSTANTS.TEXT_NODE, CONSTANTS.COMMENT_NODE].indexOf(node.nodeType) >=0;
	}

	function Node (tag, type) {
		Object.defineProperties(this, {
			'tag': {value: isContainer(this) ? tag : '', writable: false, enumerable: true, configurable: false},
			'nodeName': {value: isContainer(this) ? tag.toUpperCase() : '', writable: false, enumerable: true, configurable: false},
			'nodeType': {value: type, writable: false, enumerable: true, configurable: false},
			'parentNode': {value: null, writable: true, enumerable: true, configurable: false},
			'childNodes': {value: new ExtArr(), writable: false, enumerable: true, configurable: false},
			'firstChild': {get: function () {return this.childNodes[0] || null;}, enumerable: true, configurable: false},
			'lastChild': {get: function () {return this.childNodes.last || null;}, enumerable: true, configurable: false},
			'nextSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.childNodes[this.parentNode.childNodes.position(this) + 1] || null;
			}, enumerable: true, configurable: false},
			'previousSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.childNodes[this.parentNode.childNodes.position(this) - 1] || null;
			}, enumerable: true, configurable: false},
			'nodeValue': {value: isText(this) && ( tag || tag === 0 || tag === false) ? tag : '', writable: true, enumerable: true, configurable: false},
			'ownerDocument': {
				get: function () {
					if (this.nodeType === CONSTANTS.DOCUMENT_NODE)
						return null;
					return this._ownerDocument || null;
				},
				set: function (v) {
					if (this._ownerDocument)
						return;
					Object.defineProperty(this, '_ownerDocument', {value: v, writable: false, enumerable: false, configurable: true});
				}, enumerable: true, configurable: false
			},
			'textContent': {
				get: function () {
					switch (this.nodeType) {
						case CONSTANTS.TEXT_NODE:
						case CONSTANTS.COMMENT_NODE: return this.nodeValue; /*this.data*/
						case CONSTANTS.ELEMENT_NODE:
						case CONSTANTS.DOCUMENT_FRAGMENT_NODE: var str = [];
							for (var i = 0, l = this.childNodes.length; i < l; ++i)
								str.push(this.childNodes[i].textContent);
							return str.join(' ');
					}
				},
				set: function (v) {
					if (v.nodeType)
						v = v.textContent;
					else if (typeof v === 'object')
						v = v.toString();
					else
						v = '' + v;
					switch (this.nodeType) {
						case CONSTANTS.ELEMENT_NODE:
						case CONSTANTS.DOCUMENT_FRAGMENT_NODE: while (this.childNodes.length) this.childNodes.shift(); this.childNodes.push(text(v));
					}
				}, enumerable: true, configurable: false
			},
			/*Methods*/
			'appendChild': {
				value: function (elem) {
					if (!isContainer(this) || (elem.ownerDocument !== (this.ownerDocument || this)))
						return undefined;
					if (elem.nodeType === CONSTANTS.DOCUMENT_FRAGMENT_NODE)
						for (var i = 0, l = elem.childNodes.length; i < l; ++i)
							this.appendChild(elem.childNodes[i]);
					if (elem.parentNode)
						elem.parentNode.removeChild(elem);
					this.childNodes.push(elem);
					elem.parentNode = this;
					return elem;
				},
				writable: false,
				enumerable: true,
				configurable: false
			},
			'cloneNode': {
				value: function (deep) {
					var clone;
					switch (this.nodeType) {
						case CONSTANTS.DOCUMENT_NODE:
						case CONSTANTS.ELEMENT_NODE: clone = element(this.tag, this.nodeType); break;
						case CONSTANTS.TEXT_NODE: clone = text(this.nodeValue); break;
						if (this.nodeType === CONSTANTS.ELEMENT_NODE) {
							/*Add code to coppy attributes*/
						}
						if (deep)
							for (var i = 0, l = this.childNodes.length; i < l; ++i)
								clone.appendChild(this.childNodes[i].cloneNode());
						return clone;
					}
				},writable: false, enumerable: true, configurable: false
			},
			'compareDocumentPosition': {
				value:function (other) {
					if (this === other)
						return CONSTANTS.DOCUMENT_POSITION_SAME;
					if ((this.ownerDocument || null) !== (other.ownerDocument || null))
						return CONSTANTS.DOCUMENT_POSITION_DISCONNECTED;
					if (this.nodeType === CONSTANTS.DOCUMENT_NODE)
						return CONSTANTS.DOCUMENT_POSITION_DISCONNECTED;
					var document = this.ownerDocument,
					    nodes = document._nodes,
					    compare, tmp;
					if (nodes.position(other) < nodes.position(this)) {
						compare = CONSTANTS.DOCUMENT_POSITION_PRECEDING;
						tmp = this;
						while (tmp = tmp.parentNode) {
							if (tmp = other)
								return compare && CONSTANTS.DOCUMENT_POSITION_CONTAINS;
						}
					} else {
						compare = CONSTANTS.DOCUMENT_POSITION_FOLLOWING;
						tmp = other;
						while (tmp = tmp.parentNode) {
							if (tmp = this)
								return compare && CONSTANTS.DOCUMENT_POSITION_CONTAINED_BY;
						}
					}
					return compare;
				},
				writable: false,
				enumerable: true,
				configurable: false
			},
			'hasChildNodes': {value: function () {return !!this.childNodes.length;}, writable: false, enumerable: true, configurable: false},
			'insertBefore': {
				value: function (newChild, refChild) {
					if (!this.childNodes.position(refChild))
						throw "refChild is not a child node";
					if (!isContainer(this) || newChild.ownerDocument !== this.ownerDocument || newChild.ownerDocument !== this)
						return undefined;
					if (newChild.nodeType === CONSTANTS.DOCUMENT_FRAGMENT_NODE)
						for (var i = 0, l = newChild.childNodes.length; i < l; ++i)
							this.insertBefore(newChild.childNodes[i], refChild);
					if (newChild.parentNode)
						newChild.parentNode.removeChild(elem);
					if (!refChild)
						this.appendChild(newChild);
					else
						this.childNodes.insertBefore(newChild, removeChild);

				},
				writable: false,
				enumerable: true,
				configurable: false
			},
			'isSameNode': {
				value: function (other) {return this === other;}, writable: false, enumerable: true, configurable: false
			},
			'removeChild': {
				value: function (elem) {
					if (!this.childNodes.remove(elem))
						throw "Can not remove element which is not child";
					elem.parentNode = null;
					return elem;
				},
				writable: false,
				enumerable: true,
				configurable: false
			},
			'replaceChild': {
				value: function (newChild, oldChild) {
					this.insertBefore(newChild, oldChild);
					this.removeChild(oldChild);
				},
				writable: false,
				enumerable: true,
				configurable: false
			}
		});
	}

	function text (value) {
		var text = new Node (value, 'text');

		return text;
	}

	function element (tag, type) {
		var element = new Node(tag, type || CONSTANTS.ELEMENT_NODE);

		Object.defineProperties(element, {
			'children': {get: function () {
				var elements = new FrozenArr(),
				    nodes = this.childNodes;
				for (var i = 0, l = nodes.length; i < l; ++i) {
					var node = nodes[i];
					if (node.nodeType === CONSTANTS.ELEMENT_NODE)
						elements.push(node);
				}
				return elements.clear();
			}, enumerable: true, configurable: false},
			'firstElementChild': {get: function () {return this.children[0] || null;}, enumerable: true, configurable: false},
			'lastElementChild': {get: function () {return this.children.last || null;}, enumerable: true, configurable: false},
			'nextElementSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.children[this.parentNode.children.position(this) + 1] || null;
			}, enumerable: true, configurable: false},
			'previousElementSibling': {get: function () {
				if (!this.parentNode)
					return null;
				return this.parentNode.children[this.parentNode.children.position(this) - 1] || null;
			}, enumerable: true, configurable: false},
			'childElementCount': {get: function () {return this.children.length}, enumerable: true, configurable: false}
		})

		return element;
	}

	exports.getDocument = function () {
		var document = element ('document', CONSTANTS.DOCUMENT_NODE);

		Object.defineProperties(document, {
			'createElement': {
				value: function (tag) {
					var elem = element(tag, CONSTANTS.ELEMENT_NODE);
					elem.ownerDocument = this;
					return elem;
				}
			},
			'_nodes': {
				get: function () {
					var n = new ExtArr();
					function _scan (node) {
						n.push(node);
						var c = node.childNodes;
						for (var i = 0, l = c.length; i < l; ++i)
							_scan(c[i]);
						return n;
					}
					return _scan(this);
				},
				enumerable: false,
				configurable: false
			}
		});

		return document;
	};
}) ()