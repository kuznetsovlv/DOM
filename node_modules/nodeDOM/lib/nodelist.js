(function () {
	"use strict";

	var ExtArr = require('./extarr.js');
	var EventEmitter = require('events');

	function addKey(key, arr) {
		Object.defineProperty(this, key, {get: function () {return arr[key];},enumerable: true, configurable: false});
	}

	class NodeList extends EventEmitter{
		constructor (node, func) {
			super();
			var arr = new ExtArr();
			Object.defineProperty(this, 'length', {get: function () {return arr.length;}, enumerable: true, configurable: false});
			if (!func) {
				Object.defineProperties(this, {
					'insertBefore': {
						value: function (n, r) {
							if (typeof r !== 'number')
								r = arr.indexOf(r);
							if (r < 0 || r >= arr.length)
								return false;
							arr.splice(r, 0, n);
							return true;
						}
					},
					'position': {
						value: function (v) {
							var p = arr.indexOf(v);
							return p < 0 ? undefined : p;
						},
						writable: false,
						enumerable: false,
						configurable: false
					},
					'push' : {
						value: function (v) {
							arr.push(v);
							var n = arr.length - 1;
							if (!(n in this))
								addKey.call(this, n, arr);
						},
						writable: false,
						enumerable: false,
						configurable: false

					}
					'remove': {
						value: function (v) {
							if (typeof v !== 'number')
								v = arr.indexOf(v);
							if (v < 0 || v >= arr.length)
								return false;
							arr.splice(v, 1);
							return true;
						},
						writable: false,
						enumerable: false,
						configurable: false
					},
					'replace': {
						value: function (n, o) {
							if (typeof o !== 'number')
								o = arr.indexOf(o);
							if (o < 0 || v >= arr.length)
								return false;
							arr[o] = n;
							return true;
						},
						writable: false,
						enumerable: false,
						configurable: false
					},
					'shift': {
						value: function () {
							arr.shift();
						},
						writable: false,
						enumerable: false,
						configurable: false
					}
				});
			} else {
				this.on('nodeChanged', function () {
					var tmp = func.call(node);
					arr.clear();
					for (var i = 0, l = tmp.length; i < l; ++i) {
						arr.push(tmp[i]);
						if (! (i in this))
							addKey.call(this, i, arr);
					}
				});
				this.emit('nodeChanged');
			}

		}
	}

	module.exports = NodeList;
})()