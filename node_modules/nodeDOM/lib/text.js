(function () {
	"use strict";

	var CONSTANTS = require('./constants.js');
	var Node = require('./node.js');

	var uninheretable = 'appendChild,childNodes,firstChild,hasChildNodes,insertBefore,lastChild,normalize,removeChild,replaceChild';
	

	class Text extends Node {
		constructor (value) {
			super(value, CONSTANTS.TEXT_NODE);

			var u = uninheretable.split(',');
			for (var i = 0, l = u.length; i < l; ++i)
				delete this[u[i]];
			Object.defineProperties(this, {
				'cloneNode': {
					value: function (deep) {
						return this.ownerDocument.createTextNode(this.nodeValue);
					},
					writable: false,
					enumerable: true,
					configurable: false
				},
				'data': {
					get: function () {return this.nodeValue},
					set: function (text) {this.nodeValue = text},
					enumerable: true,
					configurable: false
				},
				'isEqualNode': {
					value: function (other) {
						return (this === other) || ((this.nodeType === other.nodeType) && (this.nodeValue === other.nodeValue));
					},
					writable: false,
					enumerable: true,
					configurable: false
				},
				'length': {
					get: function () {
						return this.nodeValue.length;
					},
					enumerable: true,
					configurable: false
				},
				'textContent': {
					get: function () {return this.nodeValue;},
					set: function (v) {
						if (v.nodeType)
							v = v.textContent;
						else if (typeof v === 'object')
							v = v.toString();
						else
							v = '' + v;
						this.nodeValue = v;
					},
					enumerable: true,
					configurable: false
				},
				'toString': {value: function () {return this.nodeValue;}, writable: false, enumerable: false, configurable: true},
				'wholeText': {
					get: function () {
						if (this.previousSibling && this.previousSibling.nodeType === CONSTANTS.TEXT_NODE)
							return this.previousSibling.wholeText;
						var text = [this.data],
						    e = this;
						while ((e = e.nextSibling) && e.nodeType === CONSTANTS.TEXT_NODE)
							text.push(e.data);
						return test.join('');
					},
					enumerable: true,
					configurable: false
				}
			});
		}
	}

	console.log(new Text('test'), '' + new Text('test'));

	module.exports = Text;
})()